#!/bin/sh

_net_mac2linklocal()	# SENS: mac-address to IPv6 fe80::*
{
	local mac="$1"
	local url="http://ben.akrin.com/ipv6_mac_address_to_link_local_converter/?mode=api"

	case "$mac" in
		*':'*)
		;;
		*)
			mac="$( echo "$mac" | sed 's/\(\w\w\)\(\w\w\)\(\w\w\)\(\w\w\)\(\w\w\)\(\w\w\)/\1:\2:\3:\4:\5:\6/g' )"
		;;
	esac

	wget -qO - "${url}&mac=${mac}"
}

_net_ip_reachable()
{
	local funcname="net_ip_reachable"
	local ip="$1"
	local max_attempts="${2:-30}"			# must be >1
	local dev="${3:-$( _net ip2dev "$ip" )}"
	local dev_list="$dev"

	case "$dev" in
		'')
			_log do $funcname daemon info "[ERR] empty devname"
			return 0
		;;
		'wlan'*)
			# TODO: ip2dev() net reliable for multiradio - introduce $WIFI_DEVS_ADHOC?
			# without known arp-entry, we must check all adhoc-channels
			for dev in $dev $WIFI_DEVS; do {
				iw dev "$dev" info | grep -q 'type IBSS'$ && dev_list="$dev_list $dev"
			} done
			dev_list="$( _list uniq "$dev_list" )"
		;;
	esac

	echo "$funcname" >"/tmp/CRON_OVERLOAD"

	while let max_attempts=max_attempts-1 ; do {
		for dev in $dev_list; do {
			# arping also returns with 0, without reply (so we grep the output)
			#
			# root@feld-sollstedt:~ arping -D -c 1 -I eth0 -f 10.10.249.33
			# ARPING to 10.10.249.33 from 0.0.0.0 via eth0
			# Sent 1 probe(s) (1 broadcast(s))
			# Received 0 reply (0 request(s), 0 broadcast(s))
			# root@feld-sollstedt:~ echo $?
			# 0

			if   arping -D -c 1 -I "$dev" -f "$ip" | grep -q ^'Received 1 replies'; then
				rm "/tmp/CRON_OVERLOAD"
				return 0
			elif arping    -c 1 -I "$dev" -f "$ip" | grep -q ^'Received 1 replies'; then
				rm "/tmp/CRON_OVERLOAD"
				return 0
			else
				_log do $funcname daemon info "arping: ip: $ip dev: $dev remaining_try: $max_attempts"
				sleep 1
			fi
		} done
	} done

	rm "/tmp/CRON_OVERLOAD"
	return 1
}

_net_text2port()
{
	local text="$1"
	local position char ascii sum value

	while [ ${position:=1} -le ${#text} ]; do {
		char="$( echo "$text" | cut -b $position )"
		ascii="$( printf '%d' "'$char" )"
		value=$(( ( $ascii * 17 ) / 3 ))	# nearly no collisions in testsuite
		sum=$(( ${sum:-1025} + $value ))
		position=$(( $position + 1 ))
	} done

	[ ${sum:=1025} -gt 65535 ] && sum="65535"
	echo "${sum:-1025}"
}

_net_refresh_dnshosts()		# this is mostly for getting recent values from nameservice-plugin of olsr
{
	local pid cmdline line
	local list_pids="$( pidof dnsmasq )"

	# TODO: has_changed '/var/run/hosts_olsr' || return 0

	for pid in $list_pids; do {
		read cmdline <"/proc/$pid/cmdline"

		case "$cmdline" in
			*'fakedns'*)
			;;
			*)
				while read line; do {
					case "$line" in
						'PPid:'*)
							set -- $line

							# it only works with the 'nobody' dnsmasq,
							# which has PPid = 1
							if [ "$2" = '1' ]; then
								# logging stats
								kill -SIGUSR1 $pid
								# rereads /etc/hosts + /etc/ethers + /var/run/hosts_olsr
								# and calls dhcp_old via dhcp-script
								kill -HUP $pid

								return 0
							else
								break
							fi
						;;
					esac
				} done <"/proc/$pid/status"
			;;
		esac
	} done
}

_net_dhcp_lease_filename()
{
	local file

	if   [ -e '/tmp/dhcp.leases' ]; then		# openwrt
		file="/tmp/dhcp.leases"
	elif [ -e '/var/run/dhcp.leases' ]; then	# freifunk-firmware
		file="/var/run/dhcp.leases"
	else
		file="$( uci -q get dhcp.@dnsmasq[0].leasefile )"
	fi

	[ -z "$file" -o ! -e "$file" ] && {
		file='/tmp/fake_dhcp_lease_file'
		touch "$file"
	}

	echo "$file"
}

_net_dhcp_lease_show()
{
	cat "$( _net dhcp_lease_filename )"
}

_net_dhcp_lease_remove()
{
	local mac="$1"
	local line
	local dhcp_lease_file="$( _net dhcp_lease_filename )"
	local tempfile="/tmp/dhcp_leases_$$"

	# typical leasfile:
	# 1397204975 f8:e0:79:de:e9:fc 10.10.12.6 anonymous-lan6-n12 *
	# 1397204779 e4:ce:8f:0e:4f:9e 10.10.12.5 anonymous-lan5-n12 01:e4:ce:8f:0e:4f:9e
	while read line; do {
		case "$line" in
			*" $mac "*)
			;;
			*)
				echo "$line"
			;;
		esac
	} done <"$dhcp_lease_file" >"$tempfile"

	mv "$tempfile" "$dhcp_lease_file"

	kill -SIGUSR1 $( _system get_first_pid dnsmasq )	# logging stats
	echo >>$SCHEDULER '/etc/init.d/dnsmasq restart'
}

_net_mac2vendor()
{
	local funcname='net_mac2vendor'
	local oui="$1"				# ab12cd | AB12CD | 1122334455AA | 11-22-33-44-55-aa | 11:22:33:44:55:AA
	local option="$2"			# e.g. 'short'
	local url="http://84.38.67.43/oui"	# see /api.txt

	# OUI = O.rganizationally U.nique I.dentifier

	if   [ ${#oui} -eq 6 -o ${#oui} -eq 12 ]; then
		:
	elif [ ${#oui} -eq 17 ]; then
		oui=${oui//:/}
		oui=${oui//-/}
		[ ${#oui} -eq 12 ] || return 1
	else
		[ ${#oui} -eq 0 ] && return 1
		oui="$( _sanitizer do "$oui" mac hex lowercase length:6 )"
		[ ${#oui} -eq 6 ] || return 1
	fi

	case "$oui" in
		# test 2nd bit of first byte: http://de.wikipedia.org/wiki/MAC-Adresse#Vergabestelle
		# for DEC in $(seq 0 255); do HEX="$( printf "0x%X\n" $DEC )"; test $(( $HEX & 2 )) -eq 2 && echo $HEX; done | cut -b4- | sort | uniq
		?'2'*|?'3'*|?'6'*|?'7'*|?'a'*|?'b'*|?'e'*|?'f'*|?'A'*|?'B'*|?'E'*|?'F'*)
			echo "locally_administered"
			return 1
		;;
		*)
			local cache="/tmp/oui/$oui"
			[ -e "$cache" ] || {
				mkdir -p "/tmp/oui"
				url="$url/${oui:0:2}/${oui:2:2}/${oui:4:2}"
				_sanitizer do "$( _wget do "$url" 5 2>/dev/null )" alphanumspacedot >"$cache"

				[ $( _file size "$cache" ) -eq 0 ] && {
					_log do $funcname daemon info "download '$url' failed or empty data"
					rm "$cache"
					return 1
				}
			}

			if [ "$option" = "short" ]; then
				head -n1 "$cache"
			else
				cat "$cache"
			fi
		;;
	esac
}

_net_ip4_is_private ()		# RFC-1918
{
	case "$1" in 192.168.*|172.1[6-9].*|172.2[0-9].*|172.3[0-1].*|169.254.*|10.*|127.*) return 0 ;; esac
	return 1
}

_net_ip2dns()
{
	local ip="$1"
	local startparse last

	# root@box:~ nslookup 10.63.6.3
	# Server:    127.0.0.1			// these 2 lines are
	# Address 1: 127.0.0.1 localhost	// optional
	#
	# Name:      10.63.6.3
	# Address 1: 10.63.6.3 mid1.F36-Dach4900er-MESH		// hostname is missing if lookup fails

	set -- $( nslookup "$ip" 2>/dev/null || echo 'ERROR ERROR' )
	while shift; do {
		case "$1" in
			'ERROR')
				break
			;;
			'Name:')
				startparse='true'
			;;
			'Address')
				[ -n "$startparse" ] && {
					if [ -n "$4" ]; then
						echo "$4"
					else
						echo "$3"
					fi

					return 0
				}
			;;
			'')
				echo "$last"
				return 0
			;;
		esac

		last="$1"
	} done

	return 1
}

_net_ip2mac()		# works only for local/active IP's, but: maybe we want to "guess" using /etc/ethers...?
{			# TODO: automatically invoke tool_remote() when non-local IP's are asked?
	local get_ip="$1"
	local line ip mac dev

#	TODO: this can be outdated, see http://www.intercity-vpn.de/files/openwrt/login_error.ejbw.wrong.mac.txt
#	[ -e "/tmp/IP2MAC_${get_ip}" ] && {
#		cat "/tmp/IP2MAC_${get_ip}"
#		return 0
#	}

	while read line; do {
		set -- ${line:-unset}
		ip="$1"
		mac="$4"

		case "$mac" in
			'00:00:00:00:00:00')
				continue
			;;
			'24:a4:2c'*)
				# KOUKAAM / NetIO-230b
				[ -e '/tmp/WATCHDOG_TYPE1' ] || _sanitizer do "$ip-$mac" alphanum >'/tmp/WATCHDOG_TYPE1'
			;;
		esac

		[ "$ip" = "$get_ip" ] && {
			_sanitizer do "$mac" lowercase >"/tmp/IP2MAC_${get_ip}"
			cat "/tmp/IP2MAC_${get_ip}"
			return 0
		}
	} done <'/proc/net/arp'

	if [ -e "/tmp/IP2MAC_${get_ip}" ]; then
		cat "/tmp/IP2MAC_${get_ip}"
	else
		# translate IPs from local interfaces (which are not in arp-cache)
		dev="$( ip --oneline address show to "$get_ip" | cut -d' ' -f2 )"
		# dev is empty, when IP is not local
		mac="$( _net dev2mac "$dev" )" && {
			echo "$mac" >"/tmp/IP2MAC_${get_ip}"
			echo "$mac"
		}
	fi

	return 1
}

_net_dns2ip()
{
	local dns="$1"
	local go ip

	# set -- $( nslookup host86-139-31-49.range86-139.btcentralplus.com )
	# Server: 127.0.0.1 Address 1: 127.0.0.1 localhost Name: host86-139-31-49.range86-139.btcentralplus.com Address 1: 86.139.31.49 host86-139-31-49.range86-139.btcentralplus.com
	set -- $( nslookup "$dns" || echo 'ERROR ERROR' )

	while shift; do {
		case "$1" in
			'ERROR')
				return 1
			;;
			'Name:')
				go='true'
			;;
			'Address:'|'Address')
				[ "$go" = 'true' ] || continue

				# 'Address 1: 84.38.67.43'
				# 'Address 1: 2a02:2e0:3fe:100::8 redirector.heise.de'
				# 'Address 2: 193.99.144.80 redirector.heise.de'
				# 'Address:    193.99.144.80'	// spaces on kernel 2.4
				[ "$1" = 'Address' ] && shift
				shift

				case "$1" in
					*':'*)
						# ignore IPv6
					;;
					*)
						echo "$1"
						return 0
					;;
				esac
			;;
		esac
	} done
}

_net_dev2ip()		# only first ip
{
	local dev="$1"
	local option="$2"	# "ip"|"mask"
	local type="$3"		# "cidr"
	local line ip_with_mask key

	line="$( ip -oneline -f inet address show dev "${dev:-no_dev_given}" )"

	set -- ${line:-is_empty}

	case "$3" in
		inet)
			key="$5"

			case "$key" in
				brd|scope)
					# e.g.:
					# 6: wlan0    inet 10.63.10.1/8 brd 10.255.255.255 scope global wlan0
					# 7: wlan0-1    inet 10.63.10.1/32 scope global wlan0-1
					ip_with_mask="$4"
				;;
				*)
					# e.g.:
					# 8: ppp0 inet 84.183.156.159 peer 217.0.116.17/32 scope global ppp0
					ip_with_mask="$6"
				;;
			esac
		;;
		*)
			return 1
		;;
	esac

	case "$option" in
		mask)
			case "$type" in
				cidr)
					echo $ip_with_mask | cut -d'/' -f2
				;;
				*)
					_net cidr2mask "$( echo $ip_with_mask | cut -d'/' -f2 )"
				;;
			esac
		;;
		*)
			echo $ip_with_mask | cut -d'/' -f1
		;;
	esac

	return
}

_net_dev2mac()
{
	local dev="${1:-empty_dev}"

	set -- $( ip --oneline link show dev "$dev" )

	while [ -n "$1" ]; do {
		case "$1" in
			*':'*)
				_sanitizer do "$1" mac check && {
					echo "$1"
					return 0
				}
			;;
		esac

		shift
	} done

	return 1
}

_net_devtype2symbol ()
{
	case $1 in
		tunnel) echo -n '=' ;;
	 	  wifi) echo -n '~' ;;
		     *) echo -n "-" ;;
	esac
}

_net_dev_type ()		# OUT1: string, "wifi/tunnel/wire"
{
	local DEV="$1"
	local OPTION="$2"	# short
	local OUT
	
	if   _net dev_is_wifi $DEV ; then
		OUT="wifi"
	elif _net dev_is_tuntap $DEV ; then
		OUT="tunnel"
	else
		OUT="wire"
	fi
	
	[ "$OPTION" = "short" ] && {
		OUT="$( _net devtype2symbol )"
	}
	
	echo -n "$OUT"
}

_net_ip2metric ()
{
	local ip="$1"
	local option="$2"

	case "$option" in
		olsr)
			_olsr remoteip2metric $ip
		;;
		*)
			ip route list $ip | sed -n 's/^.*metric \([0-9]*\).*/\1/p;q'
		;;
	esac
}

_net_dev_is_wifi()
{
	grep -q "^.*${1:-empty_devname}:" '/proc/net/wireless'
}

_net_dev_is_tuntap ()
{
	local KEYWORD="$( echo $1 | sed -n 's/^\([a-z]*\)[0-9]*/\1/p' )"
	
	[ "$KEYWORD" = "tun" ] && return 0
	[ "$KEYWORD" = "tap" ] && return 0
	return 1
}

_net_ip2dev()		# outputs real devname like 'br0' or 'wlan0-1'
{
	local funcname='net_ip2dev'
	local ip="$1"
	local line

	while read line; do {
		case "$line" in
			"$ip "*)
				# 10.63.61.1  0x1  0x2  66:70:02:f3:90:6c  *  wlan1
				set -f
				set -- $line
				set +f		# globbing ON (default)

				_log do $funcname daemon debug "try1: $6 <- $@"
				echo "$6"
				return 0
			;;
		esac
	} done <'/proc/net/arp'

	# fixme! we can be wrong:
	#
	# root@E2-ayse:~ _net ip2dev 10.63.22.65
	# ip -oneline route get 10.63.22.65
	# set -- 10.63.22.65 via 10.63.22.89 dev eth0.2 src 10.63.20.89 \ cache
	#
	# it shows the routing-table (over wire), not the expected way over wifi

	# e.g.
	# 192.168.99.243 dev br-mybridge  src 192.168.99.1 \ cache
	# fe80::221:6aff:fe32:7c1c from :: dev eth0  src fe80::da5d:4cff:fe9c:2f1a  metric 0 \ cache
	set -- $( ip -oneline route get "$ip" 2>/dev/null || echo 'ERROR ERROR' )

	while shift; do {
		case "$1" in
			'dev')
				dev="$2"
				# batman/macvlan-hack, maybe unneeded
				[ "$dev" = "gateway0" ] && dev="br-mybridge"
				echo "$dev"

				return 0
			;;
			'ERROR'|'metric'|'cache')
				return 1
			;;
		esac
	} done
}

_net_iplocal2dev ()		# does it really make sense to have this func?
{
	ip -oneline address show | sed -ne "/ inet $1\//{s/^[0-9]*: \([a-zA-Z0-9@\.]*\).*/\1/p;q}"
	
	# does not work for local IP's:
	# ip -o route get $1 | cut -d' ' -f3
}

_net_local_inet_offer ()		# SENS: check if default-route is local
{					# OUT1: string, false|wan|lan|pppoe
	local MODE="false"		# RC: true = inetoffer, false = no inetoffer
	local FUNC="net_local_inet_offer"
	local PHYDEV=0
	local METRIC=0
	local D=0
	local N=0
	local trash
	local wan_proto="$( uci get network.wan.proto )"

	[ "$wan_proto" = "pppoe" ] && {
		_log do $FUNC daemon info "early_boot_estimation: pppoe"
		echo "pppoe"
		return 0
	}

	[ -e /tmp/NETPARAM ] || {
		local WAN_GATEWAY="$( uci get network.wan.gateway )"
		[ -n "$WAN_GATEWAY" ] && {
			if [ "$WAN_GATEWAY" = "0.0.0.0" ]; then
				_nvram set wan_gateway 
				_nvram set commit "config-mistake, unsetting wan-gateway which was '$WAN_GATEWAY'"
			else
				[ "$wan_proto" = "pppoe" ] && {
					_log do $FUNC daemon info "early_boot_estimation: pppoe"
					echo "pppoe"
					return 0			# fixme!
				}
			
				_log do $FUNC daemon info "early_boot_estimation: wan"
				echo "wan"
				return 0
			fi
		}

		[ -n "$( uci get network.lan.gateway )" ] && {
			_log do $FUNC daemon info "early_boot_estimation: lan"
			echo "lan"
			return 0
		}

#		/etc/init.d/S52vpnc_fff+ check && {
#			_log do $FUNC daemon info "early_boot_estimation: tun"
#			echo "tun"
#			return 0
#		}

		# fixme! wan-dhcp?

		_log do $FUNC daemon info "early_boot_estimation: false"
		echo "false"
		return 1
	}

	local LAN_GATEWAY="$( uci get network.lan.gateway )"
	[ -n "$LAN_GATEWAY" ] && {
		[ -z "$( ip route list exact 0.0.0.0/0 via $LAN_GATEWAY )" ] && {
			[ "$LAN_GATEWAY" != "0.0.0.0" ] && {
				_log do $FUNC daemon info "alien_gateway '$LAN_GATEWAY': lan"
				echo "lan"
				return 0
			}
		}
	}

	# only look for the first default-route
	# some examples:
	#
	# default via 192.168.1.1 dev vlan1		-> wan-offer|wan_gateway
	# default via 191.255.255.1 dev venet0		-> root-server
	# default via 217.0.116.253 dev ppp0		-> pppoe
	# default dev tun0  scope link			-> vpnc
	# default via 10.63.52.36 dev br0 		-> lan-offer|lan-gateway
	# default via 10.63.99.33 dev eth0.1  metric 2 onlink		-> since ~git29366 "onlink"
	# default via 192.168.101.112 dev eth0.1  src 192.168.101.222	-> lan-offer via alias-interface
	# default via 192.168.1.1 dev eth1  proto static ->841nd
	# default via 192.168.2.1 dev br-mybridge	-> batman/no_local_inet_offer

	eval $( ip route list exact 0.0.0.0/0 | head -n1 |
		while read N N D N PHYDEV METRIC N trash; do {	# we must eval it, otherwise		// fixme! look for 'table all'?
			echo PHYDEV=$PHYDEV			# the vars from subprocess are
			echo METRIC=$METRIC			# not known
			echo N=$N
			echo D=$D				# fixme! better use 'eval $( ip route list exact 0.0.0.0/0 | sed 'xyz' )'
		} done
	)

	[ "$METRIC" = "src" ] && METRIC=			# lan-offer via alias-interface
	[ "$N" = static ] && METRIC=

	if [ -z "$METRIC" ]; then				# found no metric = local inet-offer

		_log do $FUNC daemon debug "PHYDEV: '$PHYDEV' METRIC: '$METRIC' N: '$N' D: '$D'"

		if [ -z "${PHYDEV}${METRIC}${N}" ]; then	# ip route list exact 0.0.0.0/0 -> "default via eth0" or similar

			[ "$LAN_GATEWAY" = "0.0.0.0" ] && {	# fixme! move to early-boot-estimation
				_nvram set lan_gateway 
				_nvram set commit "config-mistake, unsetting lan-gateway which was '$LAN_GATEWAY'"

				ip route delete default via $D
			}
		else
			if   [ "$PHYDEV" = "$WANDEV" ]; then
				MODE="wan"
			elif [ "$PHYDEV" = "$LANDEV" ]; then
				MODE="lan"
			elif [ "$PHYDEV" = "$WIFIDEV" ]; then
				MODE="wifi"
			elif [ "$PHYDEV" = "br-mybridge" ]; then
				MODE="false"	# batman
			else
				MODE="pppoe"	# && WANDEV=ppp0          # fixme! this is not exact!
			fi

			[ "$PHYDEV" = "link" ] && {
				if   echo $D | grep -q "^tun[0-9]*" ; then
					MODE=tun
				elif echo $D | grep -q "^tap[0-9]*" ; then
					MODE=tap
				else
					MODE="$D"				# e.g. tun0 / vpnc
				fi
			}

			_log do $FUNC daemon info "found local default-gateway over device '$PHYDEV' = '$MODE'"
		fi
	else
		if [ $N -eq 0 ]; then
			_log do $FUNC daemon info "no local default-gateway, no default-gateway, no internet 8-("
		else
			_log do $FUNC daemon info "no local default-gateway found, only $N hops away 8-)"
		fi
	fi

	echo $MODE

	[ "$MODE" = "false" ] && return 1	
	return 0
}

_net_inet_seems_stable()					# fixme! also check path to gateway (add wireless costs/hops)
{								# fixme! apply these checks regulary
	local FILE="/tmp/GATEWAY_CHECK_RECENT_COSTINT_ONLY"	# fixme! test dns also?
	local funcname="inet_seems_stable"			# fixme! use dnsfaker if unstable/unfake if stable
	local max_cost="50000"					# fixme! till we found a better way to guess
	local file_broken="/tmp/$funcname"
	local routing_proto
	local proto_uptime_ok="true"

	if pidof bat_events >/dev/null; then
		routing_proto="batman"
		[ $( _system uptime sec ) -gt 600 ] || proto_uptime_ok="false"
		FILE=
	else
		routing_proto="olsr"
		_olsr uptime is_short && proto_uptime_ok="false"
	fi

	gateway_found()
	{
		local proto="$1"

		case "$proto" in
			batman)
				local i=3
				local authserver="$( _weblogin authserver )"

				# special agreement: every node is a server (answers DHCP-requests)
				# and announces 512kbit, the real gateway announces 16mbit

				if batctl gateways | grep -q 'MBit'; then
					case "$CONFIG_PROFILE" in
						'apphalle'*)
							while let i=i-1; do {
								ping -q -c1 "$authserver" && return 0
							} done

							return 1
						;;
						*)
							return 0
						;;
					esac
				else
					test "$( uci get batman-adv.bat0.gw_bandwidth )" = '16384kbit/16384kbit'
				fi
			;;
			olsr)
				test -n "$( ip route list exact 0.0.0.0/0 table main )"
			;;
		esac
	}

	[ "$proto_uptime_ok" = "true" ] && {
		if gateway_found "$routing_proto"; then
			[ -e "$file_broken" ] && {
				rm "$file_broken"
				_log do $funcname daemon alert "unstable inet fixed after: $( _stopwatch stop "$funcname.broken" nolog,humanreadable )"

				if pidof bat_events >/dev/null; then
					# fixme!
					_system reboot_safe "ssid_change"
				else
					_weblogin generate_prebuilt_splash_htmlfile persistent

					_wifi change_essid_ap original
				fi
			}
		else
			if _watch counter "$file_broken" increment 1 max 5 ; then
				[ -e "$funcname.broken" ] || _stopwatch start "$funcname.broken" global
			else
				_wifi change_essid_ap
			fi

			_log do $funcname daemon info "unstable inet, no default route in main-table"
			return 1
		fi
	}

	[ -e "$FILE" ] && {
		read COST_INT <$FILE

		[ "$COST_INT" 2>/dev/null -gt $max_cost ] && {
			_log do $funcname daemon alert "unstable inet1, cost_int: '$COST_INT' > $max_cost"
			return 1
		}
		
		[ "$COST_INT" = "0" -a "$COST" != "1.00" ] && {
			_log do $funcname daemon alert "unstable inet2, cost_int: '$COST_INT'"
			return 1
		}
	}

	return 0
}

_net_mac2ip()		# SENS: get client-IP from different sources
{
	local mac="$1"
	local funcname="mac2ip"

	# 6 x hex-bytes + 5 x ':' = 17
	[ -z "$mac" -o ${#mac} -ne 17 ] && return 1

	_sanitizer include

	local MAC="$( _sanitizer do "${mac:-unset_mac}" lowercase )"
	local IP=
	local HOSTNAME=
	local COUNT=

	try_0()
	{
		case "$MAC" in
			02:00:ca:*|02:00:de:*)
				# we use selfdefined mac's on some batman-nodes, e.g.
				# 02:00:ca:b1:01:11 = node 111 (last 4 digits)
				# 02:00:ca:fe:02:22 = node 222
				# 02:00:ca:ff:00:33 = node  33
				# 02:00:de:ad:01:34 = node 134
				MAC="$( echo "$MAC" | cut -d':' -f5 )$( echo "$MAC" | cut -d':' -f6 )"

				MAC="${MAC#0}"          # e.g. 0002 -> 2
				MAC="${MAC#0}"
				MAC="${MAC#0}"

				IP="192.168.$MAC.1"
#				IP="$( _ipsystem do "$MAC" | grep ^"WIFIADR=" | cut -d'=' -f2 )"
			;;
		esac
	}

	try_1()		# is filled during _netfiler_user_add() (macs are lowercase)
	{
		if [ -e "/tmp/MAC2IP_$MAC" ]; then
			read IP <"/tmp/MAC2IP_$MAC"
		else
			[ -e "/tmp/NETFILTER/MAC2IP/$MAC" ] && {
				read IP <"/tmp/NETFILTER/MAC2IP/$MAC"
			}
		fi
	}

	try_2()		# arp-cache (macs are lowercase)
	{
		local mac ip line

		while read line; do {
			set $line
			ip="$1"
			mac="$( _sanitizer do "$4" lowercase )"

			[ "$MAC" = "$mac" ] && {
				IP="$ip"
				return
			}

		} done </proc/net/arp
	}

	try_3()		# DHCP-leases (macs are lowercase)
	{
		local leasefile="$( _net dhcp_lease_filename )"

		[ -e "$leasefile" ] && {
			IP="$( sed -e "/$MAC/!d" -ne 's/^.* ..:..:..:..:..:.. \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\) .*/\1/p' "$leasefile" )"
		}
	}

	try_4()		# /etc/ethers -> /etc/local.hosts (macs are lowercase)
	{
		HOSTNAME="$( sed -n "s/^$MAC \(.*\)/\1/p" /etc/ethers 2>/dev/null )"
		[ -n "$HOSTNAME" ] && IP="$( sed -n "/$HOSTNAME/s/^\([0-9\.]*\) ${HOSTNAME}.*/\1/p" /etc/local.hosts )"
	}

	for COUNT in 0 1 2 3 4 ; do {
		try_${COUNT}

		[ -n "$IP" ] && {
			echo "$MAC" >/tmp/IP2MAC_$IP
			echo "$IP"
			return 0
		}
	} done

	_log do $funcname daemon info "could not get ip for mac $MAC"
	return 1
}

_net_mac2hostname ()
{
	local MAC="$1"                                                                                                                                                
	local NAME="$( grep -i $MAC /etc/ethers | sed -n 's/^..:..:..:..:..:.. \(.*\)-.*-.*\..*$/\1/p' )"	# cutting off e.g. "-lan1-n364.domain"
	echo ${NAME:=anonym}                                                                                                                                          
}

_net_mac2dev()
{
	local get_mac="$1"
	local exact="$2"		# e.g. for arp_permanent we need 'br-mybridge' and not 'wlan1'
	local mac dev dummy wifidev

	_sanitizer include

	while read dummy dummy dummy mac dummy dev; do {
		mac="$( _sanitizer do "$mac" lowercase )"

		[ "$get_mac" = "$mac" ] && {
			[ -n "$exact" ] || {
				case "$dev" in
					'br-mybridge'|'gateway0')
						for wifidev in $WIFI_DEVS; do {
							iw dev "$wifidev" station get "$mac" 2>/dev/null >/dev/null && {
								dev="$wifidev"
								break
							}
						} done
					;;
				esac
			}

			echo "$dev"
			return 0
		}

	} done </proc/net/arp

	return 1
}

_net_mac2media()
{
	local MAC="$1"				# ARG1: (string) mac-address
	local SHORT="$2"			# ARG2: (string) keyword "short" (optional)
	local OUT=0				# OUT1: (string) wifi,wire OR ~,-
	local DEV="$( _net mac2dev "$MAC" )"

	  if [ "$DEV" = "$WIFIDEV" ]; then
	  	OUT=wifi
	elif uci get system.@ethers[0].wifi | grep -qi $MAC ; then
		OUT=wifi
	elif grep -sq ^"$( _sanitizer do "$( _net mac2ip $MAC )" escape_dots );" /tmp/CLIENTS_WIFI ; then
		OUT=wifi
	else
		OUT=wire		# fixme! this can also be guessed!
	fi

	[ -n "$SHORT" ] && OUT="$( _net devtype2symbol $DEV )"

	echo -n "$OUT"
}

_net_arp_permanent ()					# ARG1:ip ARG2:mac ARG3:wifi or wire
{
	local FUNC="net_arp_permanent"
        local IP="$1"
        local MAC="$( _sanitizer do "$2" lowercase )"
        local FORCE="$3"						# fixme! use also IP to guess interface
	local nudmode="${4:-permanent}"
	local dev_keyword MODE LINE DEV

        _log do $FUNC daemon info "IP: '$IP' MAC: '$MAC' FORCE: '$FORCE' nudmode: '$nudmode'"

	[ "$MAC" = "00:00:00:00:00:00" ] && {		# fixme! see dhcp-script
		return 1
	}

	LINE="$( ip neigh show to $IP 2>/dev/null )"
	echo "$LINE" | fgrep -i -q " $nudmode" && {
		_log do $FUNC daemon info "already nud '$nudmode' - do nothing"
		return
	}

	if [ -n "$LINE" ]; then
		MODE="change"
	else
		MODE="add"
	fi

	DEV="$( _net mac2dev "$MAC" )"		# fixme! probe up to 3 times?

 	if [ -z "$DEV" ]; then
		_log do $FUNC daemon info "not in neigh-list, probing"

 		  if [ "$FORCE" = "wifi" ]; then

			dev_keyword="wifi (forced)"
 			DEV="$WIFIDEV"

 		elif [ "$( _net mac2media $MAC )" = "wire" ]; then		# why a 2nd try? -> checked: is needed somethimes

			dev_keyword="wire (detected at 2nd try)"
 			DEV="$LANDEV"
 		else
 			dev_keyword="wifi (defaulting)"
 			DEV="$WIFIDEV"
 		fi
 	else
 		dev_keyword="$DEV (correctly detected)"
 	fi

	_log do $FUNC daemon info "detected physical-device ${dev_keyword:-unknown}: ip neigh $MODE $IP dev $DEV lladdr $MAC nud $nudmode"
	ip neigh $MODE $IP dev $DEV lladdr $MAC nud "$nudmode" 2>/dev/null
}

_net_mask2cidr ()
{
	local o

	case $1 in
		255.255.255.254) o=31 ;;
		255.255.255.252) o=30 ;;
		255.255.255.248) o=29 ;;
		255.255.255.240) o=28 ;;
		255.255.255.224) o=27 ;;
		255.255.255.192) o=26 ;;
		255.255.255.128) o=25 ;;
		255.255.255.0) o=24 ;;
		255.255.254.0) o=23 ;;
		255.255.252.0) o=22 ;;
		255.255.248.0) o=21 ;;
		255.255.240.0) o=20 ;;
		255.255.224.0) o=19 ;;
		255.255.192.0) o=18 ;;
		255.255.128.0) o=17 ;;
		255.255.0.0) o=16 ;;
		255.254.0.0) o=15 ;;
		255.252.0.0) o=14 ;;
		255.248.0.0) o=13 ;;
		255.240.0.0) o=12 ;;
		255.224.0.0) o=11 ;;
		255.192.0.0) o=10 ;;
		255.128.0.0) o=9 ;;
		255.0.0.0) o=8 ;;
		254.0.0.0) o=7 ;;
		252.0.0.0) o=6 ;;
		248.0.0.0) o=5 ;;
		240.0.0.0) o=4 ;;
		224.0.0.0) o=3 ;;
		192.0.0.0) o=2 ;;
		128.0.0.0) o=1 ;;
		*) o=32 ;;
	esac

	echo -n $o
}

_net_cidr2mask ()		# OUT1: string
{
	local o
	
	case $1 in
		31) o=255.255.255.254 ;;
		30) o=255.255.255.252 ;;
		29) o=255.255.255.248 ;;
		28) o=255.255.255.240 ;;
		27) o=255.255.255.224 ;;
		26) o=255.255.255.192 ;;
		25) o=255.255.255.128 ;;
		24) o=255.255.255.0 ;;
		23) o=255.255.254.0 ;;
		22) o=255.255.252.0 ;;
		21) o=255.255.248.0 ;;
		20) o=255.255.240.0 ;;
		19) o=255.255.224.0 ;;
		18) o=255.255.192.0 ;;
		17) o=255.255.128.0 ;;
		16) o=255.255.0.0 ;;
		15) o=255.254.0.0 ;;
		14) o=255.252.0.0 ;;
		13) o=255.248.0.0 ;;
		12) o=255.240.0.0 ;;
		11) o=255.224.0.0 ;;
		10) o=255.192.0.0 ;;
		 9) o=255.128.0.0 ;;
		 8) o=255.0.0.0 ;;
		 7) o=254.0.0.0 ;;
		 6) o=252.0.0.0 ;;
		 5) o=248.0.0.0 ;;
		 4) o=240.0.0.0 ;;
		 3) o=224.0.0.0 ;;
		 2) o=192.0.0.0 ;;
		 1) o=128.0.0.0 ;;
		 *) o=255.255.255.255 ;;
	esac
	
	echo -n $o
}

_net_hosts2cidr ()
{
	local o
	local HOSTS="$1"

	  if [ $HOSTS -le 1 ]; then
		o=32
	elif [ $HOSTS -le 2 ]; then
		o=31
	elif [ $HOSTS -le 4 ]; then
		o=30
	elif [ $HOSTS -le 8 ]; then
		o=29
	elif [ $HOSTS -le 16 ]; then
		o=28
	elif [ $HOSTS -le 32 ]; then
		o=27
	elif [ $HOSTS -le 64 ]; then
		o=26
	elif [ $HOSTS -le 128 ]; then
		o=25
	elif [ $HOSTS -le 256 ]; then
		o=24
	fi

	echo -n $o
}
